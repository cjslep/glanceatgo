A Glance At Go

12:00 October 24, 2014
Tags: golang, introduction

Cory Slep
Jr. Software Developer, Applied Research Associates
cslep@ara.com

* Overview

- Motivation: Why does Go exist?
- Learning Go: What creates the big picture?
- 

* Motivation: Why does Go exist?

* Initial Idea

On September 21, 2007 Go was first discussed by Robert Griesemer, Rob Pike, and Ken Thompson.

Frustration with using C++, Java, Python, and other languages.

_"[...]_development_at_Google_is_big,_can_be_slow,_and_is_often_clumsy."_ -Rob Pike

.image run.png
.caption _Gopher_ by [[http://www.reneefrench.com][Renée French]]

* Issues In The Software Engineering Big Picture

- Language design was in unrelated environment to today's programming environment.
- Programmers using different subsets and dialects of the same programming language.
- Issues of scaling across developers, codebases, and hardware.
- Build times on order of minutes to hours, consistently.
- Uncontrolled or runaway dependencies.
- Programs difficult to read.
- Duplication of effort.
- Cost of updates too high.
- Lack of tools, or too difficult/expensive to build tools.
.caption from [[https://talks.golang.org/2012/splash.article][Go at Google: Language Design in the Service of Software Engineering]]

* Static or Dynamically Typed?

Peter Norvig, Director of Research at Google, explored weaknesses in Java and C++.

The Go team viewed popular "outsider" languages like Lua, Javascript, Ruby as "reactionary" languages and saw they are mostly dynamically typed.

Desired static-typing instead:

- Proven in practice to create large-scale programs.
- Powerful for experts.
- Allows for many programmers.

But, avoid the previous list of issues.

* The Target

- Comprehensible
- Statically typed
- Light on the page
- Fast to work in / Fast builds
- Doesn't require tools, but supports them well
- Good at networking and multiprocessing*
- `error` is builtin
- Package Dependency Management
- Simple Package Export Rules
- Third Party Code Discovery
.caption from [[http://web.stanford.edu/class/ee380/Abstracts/100428.html][Another Go at Language Design]] and [[https://talks.golang.org/2012/splash.article][Go at Google: Language Design in the Service of Software Engineering]]

* Brief Timeline on Multicore Processors

C++, Java, and Python rely on libraries to do concurrent programming. 

- C++ designed in 1979, first standardized 1998
- Java design started in 1991, first released in 1995
- Python designed in 1989, first released in 1991

First mass-produced commercial multicore commercial chip was IBM's _POWER4_ chip in 2001. By 2006, Intel (_Core_Duo_) and AMD (_Opteron_) joined with multicore CPUs.

* Were They Successful?

Let's skim the surface of the language at a high level.

What will not be shown (because they do not exist in Go version 1):

- Generic programming (templates)
- Dynamic libraries

* Learning Go: What creates the big picture?

* The Tour

An online tour of the language is available at [[http://tour.golang.org/]]:

.image tourHome.png _ 900

* The Playground

Play with the language without installing it at [[http://play.golang.org/]]:

.image playHome.png _ 900

* 

* References:


- [[https://talks.golang.org/2012/splash.article][Go at Google: Language Design in the Service of Software Engineering]] by Rob Pike at SPLASH 2012 in Tucson, Arizona, on October 25, 2012.
- [[http://web.stanford.edu/class/ee380/Abstracts/100428.html][Another Go at Language Design]] by Rob Pike, on April 28, 2010.
- [[https://code.google.com/p/go/source/browse/][Golang Source Code]].
- [[http://norvig.com/design-patterns/][Design Patterns in Dynamic Languages]] by Peter Norvig, on May 5, 1996.
- [[http://www.reneefrench.com][_Gopher_ Images]] by Renée French.
- [[http://research.swtch.com/generic][The Generic Dilemma]] by Russ Cox, December 3, 2009.
- [[https://groups.google.com/d/topic/golang-nuts/o0VTTqC8hOU/discussion][External Linking CLs]] discussion in golang-nuts.
- [[https://groups.google.com/d/topic/golang-dev/Lp59oYc4Ta8/discussion][Go shared libraries]] discussion in golang-dev.