A Glance At Go

12:00 October 24, 2014
Tags: golang, introduction

Cory Slep
Jr. Software Developer, Applied Research Associates
cslep@ara.com

* Overview

- Motivation: Why does Go exist?
- Learning Go: What creates the big picture?
- 

* Motivation: Why does Go exist?

* Initial Idea

On September 21, 2007 Go was first discussed by Robert Griesemer, Rob Pike, and Ken Thompson.

Frustration with using C++, Java, Python, and other languages.

_"[...]_development_at_Google_is_big,_can_be_slow,_and_is_often_clumsy."_ -Rob Pike

.image run.png
.caption _Gopher_ by [[http://www.reneefrench.com][Renée French]]

* Issues In The Software Engineering Big Picture

- Languages were designed in unrelated environments.
- Programmers using different subsets and dialects.
- Issues of scaling across developers, codebases, and hardware.
- Build times on order of minutes to hours, consistently.
- Uncontrolled or runaway dependencies.
- Cost of updates too high.
- Lack of tools, or too difficult/expensive to build tools.

* Static or Dynamically Typed?

Peter Norvig, Director of Research at Google, explored weaknesses in Java and C++.

The Go team initially looked at dynamically typed languages like Lua, Javascript, Ruby.

Desired static-typing instead:

- Proven in practice to create large-scale programs.
- Powerful for experts.

* The Target

- Comprehensible, "light on the page"
- Statically typed
- Fast builds
- Fast to work in
- Doesn't require tools, but supports them well
- Third party code discovery
- Good at networking and multiprocessing

* Brief Timeline on Multicore Processors

C++, Java, and Python rely on libraries to do concurrent programming. 

- Python designed in 1989, first released in 1991
- Java design started in 1991, first released in 1995
- C++ designed in 1979, first standardized 1998

First mass-produced commercial multicore commercial chip was IBM's _POWER4_ chip in 2001. By 2006, Intel (_Core_Duo_) and AMD (_Opteron_) joined with multicore CPUs.

* Were They Successful?

- Mark and sweep garbage collected
- Composition only, no inheritance
- Interface implementation via duck-typing
- Deployment is a single binary
- Concurrency using built in language features
- Cross-compiling with `$GOOS` and `$GOARCH` (9 OSs, 3 architectures)
- `error` support

* Not in Go Version 1:

- Generic programming (templates)
- Dynamic libraries
- An easy-to-use debugger

* Learning Go: What creates the big picture?

* The Tour

An online tour of the language is available at [[http://tour.golang.org/]]:

.image tourHome.png _ 900

* The Playground

Play with the language without installing it at [[http://play.golang.org/]]:

.image playHome.png _ 900

* Hello World

.play helloWorld.go

* Hello World

.code helloWorld.go

- `package`main` is a special package name for packages containing a main function.
- `import`"fmt"` is similar to the `#include` C++ preprocessor macro.
- The keyword `func` is used to declare a function.
- _"Semicolons,_however,_are_for_parsers,_not_for_people,_and_we_wanted_to_eliminate_them_as_much_as_possible."_ Golang FAQ

* An Expanded Example

.play naiveFact.go /START/,/END/

- A few semicolons, but BCPL-based _(not_javascript)_ semicolon injection forces brace style
- Less parentheses.

.play naiveFactBadBrace.go /START/,/END/

* An Expanded Example (w/ Closure)

.play closureFact.go /START/,/END/ HL000

* C/C++ vs Go: Functional Programming

Function type declaration:

- `typedef`int`(*fn)(int,`int)`
- `type`fn`func(int,`int)`int`

* C/C++ vs Go: Functional Programming (cont.)

Function using a function type declaration:

- `typedef`int`(*fn)(int`(*)(int,`int),`int)`
- `type`fn`func(func(int,`int)`int,`int)`int`

* C/C++ vs Go: Functional Programming (cont.)

Function using and returning a function type declaration:

- `typedef`int`(*(*fn)(int`(*)(int,`int),`int))(int,`int)`
- `type`fn`func(func(int,`int)`int,`int)`func(int,`int)`int`

* What about bad input?

.code naiveFact.go //,/END/

* Error Handling

.play closureFactErr.go

* What is an error?

Error is a built in interface in the language:

.code errorDef.go

Any type satisfying all of the function definitions satisfies the interface.

* Creating an error with extra data:

.play metadataError.go /START/,/END/

* Handling the Exceptional without Exceptions

From the `io` package, some lines omitted:

.code ioCopySample.go /STARTIO/,/ENDIO/

* Handling the Exceptional without Exceptions (cont.)

Returning an error as soon as it happens is idiomatic.

.code ioCopySample.go /STARTAPP/,/ENDAPP/

* Handling the Exceptional without Exceptions (cont.)

Handling cleanup would be a problem...

.code ioCopySample.go /STARTAPPCLOSE/,/ENDAPPCLOSE/

* Handling the Exceptional without Exceptions (cont.)

\... but `defer` saves the day.

.code ioCopySample.go /STARTAPPDEFER/,/ENDAPPDEFER/

* Defer any function

.play deferExample.go

* References:

- [[https://talks.golang.org/2012/splash.article][Go at Google: Language Design in the Service of Software Engineering]] by Rob Pike at SPLASH 2012 in Tucson, Arizona, on October 25, 2012.
- [[http://web.stanford.edu/class/ee380/Abstracts/100428.html][Another Go at Language Design]] by Rob Pike, on April 28, 2010.
- [[https://code.google.com/p/go/source/browse/][Golang Source Code]].
- [[http://norvig.com/design-patterns/][Design Patterns in Dynamic Languages]] by Peter Norvig, on May 5, 1996.
- [[https://golang.org/doc/faq][Golang FAQ]].
- [[http://www.reneefrench.com][_Gopher_ Images]] by Renée French.
- [[http://research.swtch.com/generic][The Generic Dilemma]] by Russ Cox, December 3, 2009.
- [[https://groups.google.com/d/topic/golang-nuts/o0VTTqC8hOU/discussion][External Linking CLs]] discussion in golang-nuts.
- [[https://groups.google.com/d/topic/golang-dev/Lp59oYc4Ta8/discussion][Go shared libraries]] discussion in golang-dev.