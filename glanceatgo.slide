A Glance At Go

12:00 October 24, 2014
Tags: golang, introduction

Cory Slep
Jr. Software Developer, Applied Research Associates
cslep@ara.com

* Purpose

Consider programming language choice as one piece of a solution to a technical problem.

* The Tour

An online tour of the language is available at [[http://tour.golang.org/]]:

.image tourHome.png _ 900

* The Playground

Play with the language without installing it at [[http://play.golang.org/]]:

.image playHome.png _ 900

* Overview

- Motivation: Why does Go exist?
- The Go Ecosystem
- So What's Missing?
- Learning Go: What creates the big picture?

* Motivation: Why does Go exist?

* Initial Idea

On September 21, 2007 Go was first discussed by Robert Griesemer, Rob Pike, and Ken Thompson.

Frustration with using C++, Java, Python, and other languages.

_"[...]_development_at_Google_is_big,_can_be_slow,_and_is_often_clumsy."_ -Rob Pike

.image run.png
.caption _Gopher_ by [[http://www.reneefrench.com][Ren√©e French]]

* Issues In The Software Engineering Big Picture

- Languages were designed in unrelated environments.
- Programmers using different subsets and dialects.
- Issues of scaling across developers, codebases, and hardware.
- Build times on order of minutes to hours.
- Uncontrolled or runaway dependencies.
- Cost of updates too high.
- Lack of tools, or too difficult/expensive to build tools.

* The Target

- Statically typed
- Comprehensible, "light on the page"
- Fast builds
- Fast to work in
- Doesn't require tools, but supports them well
- Third party code discovery
- Good at networking and _multiprocessing_

In short: Design a language targeted for software engineers and production systems, not for academic researchers and CS research.

* Brief Timeline on Multicore Processors

C++, Java, and Python rely on libraries to do concurrent programming. 

- Python designed in 1989, first released in 1991
- Java design started in 1991, first released in 1995
- C++ designed in 1979, first standardized 1998

First mass-produced commercial multicore commercial chip was IBM's _POWER4_ chip in 2001. By 2006, Intel (_Core_Duo_) and AMD (_Opteron_) joined with multicore CPUs.

* Language Features

- Mark and sweep garbage collected
- Composition only, no inheritance
- Interface implementation via duck-typing
- Deployment is a single binary
- Concurrency using built in language features
- Cross-compiling with `$GOOS` and `$GOARCH`
- `error` support is built in

* The Go Ecosystem

* The Go Ecosystem

_"Go:_'get_shit_done'_language"_ -Brad Fitzpatrick

Unlike other projects (ex: `protobuf`), Google _imports_ the Go project into its organization _from_ the open source community.

* Who is using Go?

- youtube.com and dl.google.com ([[https://github.com/youtube/vitess][OSS MySQL Scaling Architecture]])
- BBC Worldwide
- Bitbucket
- Digital Ocean
- Dropbox ([[https://github.com/dropbox/godropbox][OSS Libraries]])
- GitHub
- Mozilla Services ([[https://github.com/mozilla-services/heka][OSS Data Acquisition & Processing]])
- Tumblr ([[https://github.com/tumblr/gocircuit][OSS 'Circuit' Package]])

Many more listed [[https://code.google.com/p/go-wiki/wiki/GoUsers][here]]

* Who is using Go? (cont.)

- Big teams
- Small teams
- Open-source products
- Proprietary products
- Startups
- Large Companies

The community driven `go` command line tool is designed to be a simple and unobtrusive companion for any gopher.

.image project.png 150 _

* The Go Tool

The `go` tool is provided to help the developer but is not required to use.

Makes many things easy to do from the command line:

- *Get*code*
- Build code
- Test code
- Benchmark code
- Format code
- Simple static checking

* The Go Tool: Conventions

When using the `go` tool, the local workspace is set up in the following way:

.code dirSystem.txt /DIR/,/DIREND/

Packages are similar to namespaces in C++, but equate to a single library or executable.

* Packages & Getting Code

Let's use an example: *godropbox*.

It is available at: [[http://github.com/dropbox/godropbox][http://github.com/dropbox/godropbox]]

Each directory is its own package. There is no special relationship between a parent and child directory besides keeping things organized.

.image godropbox.png 350 _

* Packages & Getting Code (cont.)

.code dirSystem.txt /GETEX/,/GETEXEND/

Fetches the code remotely and puts it on your local machine. Supported VCS:

- Mercurial
- Git
- Subversion
- Bazaar

Any server can host the code, but the most commonly used websites are:

- github.com
- bitbucket.org
- code.google.com/p

* Packages & Getting Code (cont.)

To use a package:

.code dirSystem.txt /IMPORT/,/IMPORTEND/

That is all it takes to get and use source code!

* Discovering Code: godoc

`godoc` is used to convert documentation to text, HTML, UNIX man page...

The [[http://godoc.org/][godoc.org]] website automatically generates godoc information for libraries publicly available for GitHub, Bitbucket, Launchpad, and Google Project Housing.

Standard library example: [[http://golang.org/pkg/net/http/][http://golang.org/pkg/net/http/]]

*godropbox* example: [[https://godoc.org/github.com/dropbox/godropbox][https://godoc.org/github.com/dropbox/godropbox]]

* Documenting Go Code

To leverage godoc, put comments directly prior to whatever it is being documented:

.code godocSample.go
.image bitVector.png

- Need to put a blank line between comments to start a new paragraph.
- Preformatted text needs to be indented relative to surrounded comment text.
- URLs will be converted to HTML.
.caption from [[http://blog.golang.org/godoc-documenting-go-code][Documenting Go Code]]

[[https://godoc.org/github.com/fluhus/godoc-tricks][Godoc Tricks]] has many examples.

* The Go Tool Revisited

.code goTool.txt /GET/,/GETEND/
- *Build*code*
- Test code
- Benchmark code
- Format code
- Simple static checking

* Compiling Code

There are two commands:

.code goTool.txt /BUILD/,/BUILDEND/

- If a library, compile but delete output (ensure it compiles)
- If an executable, compile executable to output directory

.code goTool.txt /INSTALL/,/INSTALLEND/

- If a library, compile library to `pkg/OS_ARCH/example.tld/path/to/foo.a`
- If an executable, compile to `bin/`

* Compiling Code (cont.)

Two compilers in Go:

- `gccgo`: Slower compilation, values CPU over concurrency (thread) optimizations, supports OSs that GCC supports.
- `gc`: Faster compilation, values concurrency (coroutines) over CPU optimizations, based on Plan 9 C compiler.

The linker used is based on the Plan 9 linker.

* Compiling Code (cont.)

When using the `go` tool:

- It checks all `import` ed dependencies recursively
- Quits and warns if any circular dependencies are detected
- Rebuilds only packages that have changed or whose dependencies have been rebuilt

So no more setting build dependencies, specifying linker directories, configuring VS project files...

* How fast is Go?

[[http://www.techempower.com/benchmarks/#section=data-r9&hw=peak&test=json][Techempower]]'s web framework benchmarks provides a variety of tests.

.image benchTE.png 500 _

* The Go Tool Revisited

.code goTool.txt /GET/,/GETEND/
.code goTool.txt /BUILD/,/BUILDEND/
.code goTool.txt /INSTALL/,/INSTALLEND/
- *Test*code*
- Benchmark code
- Format code
- Simple static checking

* Testing Code

Testing is done by unit tests which are in files right beside the source code.

When getting the source, the tests can be immediately viewed and run to judge quality.

Test coverage can help determine the quality of the tests.

.code goTool.txt /COVERTEST/,/COVERTESTEND/

* Testing Code (cont.)

Code for testing go in files that end in `_test`

By convention, `foo.go` is tested by `foo_test.go`

.image dboxTests.png
.caption A sample of [[https://github.com/dropbox/godropbox/tree/master/caching][godropbox/caching]] files.

* Testing Code (cont.)

.code fooTest.go

* The Go Tool Revisited

.code goTool.txt /GET/,/GETEND/
.code goTool.txt /BUILD/,/BUILDEND/
.code goTool.txt /INSTALL/,/INSTALLEND/
.code goTool.txt /TESTONLY/,/TESTONLYEND/
- *Benchmark*code*
- Format code
- Simple static checking

* Benchmarking Code

.code fooBench.go
.code goTool.txt /BENCHALL/,/BENCHALLEND/

* The Go Tool Revisited

.code goTool.txt /GET/,/GETEND/
.code goTool.txt /BUILD/,/BUILDEND/
.code goTool.txt /INSTALL/,/INSTALLEND/
.code goTool.txt /TESTONLY/,/TESTONLYEND/
.code goTool.txt /BENCHONLY/,/BENCHONLYEND/
- *Format*code*
- Simple static checking

* Formatting Code

The tool grew to encompass the `gofmt` tool as `go`fmt`.

Automatically formats syntactically valid code into a certain style.

.code gofmtEx.go /PREFORMAT/,/PREFORMATEND/
.code gofmtEx.go /POSTFORMAT/,/POSTFORMATEND/

* Formatting Code (cont.)

The high adoption rate of this tool ensures that there is a high chance you are able to read third party Go code, because it looks like your code.

_"Code_is_written_once_and_read_many_times."_ - Unknown Pragmatic Programmer

Wikipedia lists a few brace styles:

- Kernel Style
- K&R Style (2 variants)
- Allman Style
- BSD KNF Style
- ...and 7 others

* Formatting Code (cont.)

LLVM's libc++ standard library does not follow one standard. Vector:

.code bracesLLVM.txt

* Formatting Code (cont.)

The Go standard library is run through the format tool. From `crypto/sha512`:

.code bracesGolang.go

* Formatting Code (cont.)

.code goFmtBraces.go /PRE/,/PREEND/
becomes

.code goFmtBraces.go /POST/,/POSTEND/

* Formatting Code (cont.)

Formatting is a convention, and Go is open-source.

Forking the [[http://golang.org/src/cmd/gofmt/gofmt.go][gofmt]] source is always an option.

But there is a caveat...

* Formatting Code (cont.)

.play syntaxErr.go

* Formatting Code (cont.)

Semicolon injection forces brace style.

BCPL-based injection. _Not_javascript_ .

If at the end of a line it looks like a statement, put a semicolon there.

_"Semicolons,_however,_are_for_parsers,_not_for_people,_and_we_wanted_to_eliminate_them_as_much_as_possible."_ - [[https://golang.org/doc/faq#semicolons][golang FAQ]]

Therefore, this could be a statement:

.code syntaxErr.go /MAYBESTATEMENT/,/MAYBESTATEMENTEND/

* The Go Tool Revisited

.code goTool.txt /GET/,/GETEND/
.code goTool.txt /BUILD/,/BUILDEND/
.code goTool.txt /INSTALL/,/INSTALLEND/
.code goTool.txt /TESTONLY/,/TESTONLYEND/
.code goTool.txt /BENCHONLY/,/BENCHONLYEND/
.code goTool.txt /FMT/,/FMTEND/
- *Simple*static*checking*

* Simple Static Checking

Like `go`fmt`, `go`vet` was adopted from a popular third-party tool.

- Unreachable code
- Useless assignments
- Atomic mistakes (concurrency kind of atomic)
- ...many others

* The Go Tool Summarized

.code goTool.txt /GET/,/GETEND/
.code goTool.txt /BUILD/,/BUILDEND/
.code goTool.txt /INSTALL/,/INSTALLEND/
.code goTool.txt /TESTONLY/,/TESTONLYEND/
.code goTool.txt /BENCHONLY/,/BENCHONLYEND/
.code goTool.txt /FMT/,/FMTEND/
.code goTool.txt /VET/,/VETEND/

* So What's Missing?

* Not in Go Version 1.x

An easy-to-use debugger is missing from the ecosystem.

Mitigations:

- `gdb` takes some significant wrangling.
- Print statements everywhere.
- Side effect: a great motivator for writing tests.

* Not in Go Version 1.x

Dynamically linked/loaded libraries are missing. Everything is statically linked.

Mitigations:

- Wait.
- Choose another language.

* Not in Go Version 1.x

Generic programming (templates). Incredibly controversial.

Mitigations:

- Wait for the `go`generate` command.
- `interface{}` containers and typecasting.
- Custom code generators.

* Learning Go: What creates the big picture?

* Hello World

.play helloWorld.go

* Concurrency

Go uses the keyword `go` to create _goroutines_.

The `gc` compiler implements _goroutines_ as coroutines.

The `gccgo` compiler implements _goroutines_ as threads.

Each goroutine starts at 8kB stack space that is grown as needed.

* Making Hello World Concurrent

.play concurrentHelloWorld.go

* Making Hello World Concurrent

.code concurrentHelloWorld.go

Nothing printed!

* Making Hello World Concurrent

.code concurrentHelloWorld.go

The main function exited before the goroutine could write the string to `stdout`.

* Concurrent Flow Of Control

Traditionally, mutexes are used to prevent race conditions.

Mutexes embody the concept of _"communicate_by_sharing_memory"_ .

Mutexes are still available in Go, but _channels_ are favored instead.

Channels embody the concept of _"share_memory_by_communicating"_ .

This is one of the core philosophies to effectively writing concurrent code in Go, so much so that [[https://blog.golang.org/share-memory-by-communicating][their blog]] states: _Do_not_communicate_by_sharing_memory;_instead,_share_memory_by_communicating._

* Tangent: Concurrency vs Parallelism

Rob Pike [[http://blog.golang.org/concurrency-is-not-parallelism][has a great talk]] on this topic that fully outlines the differences.

The short version:

- _"Concurrency_is_about_structure_[of_a_solution]"_ (ex: graphics & DB query & ...)
- _"Parallelism_is_about_execution_[of_a_solution]"_ (ex: dot product, bitcoin mining)

You can solve problems concurrently that are intractable to parallelize.

* Making Hello World Concurrent

Sharing information across channels:

.play concurrentChanSendHW.go HL001

* Making Hello World Concurrent

Signaling a synchronization point:

.play concurrentCorrectHelloWorld.go HL001

* Making Hello World Concurrent

Notice the anonymous closures used:

.code concurrentChanSendHW.go /ANONFUNC/,/ANONFUNCEND/ HL001
.code concurrentCorrectHelloWorld.go /ANONFUNC/,/ANONFUNCEND/ HL001

Also note that the anonymous function is called immediately.

* Function Declarations

To elaborate further, let's create simple helper functions:

.code helloAndWorld.go /HELLO/,/HELLOEND/
.code helloAndWorld.go /WORLD/,/WORLDEND/

* Making Hello World Concurrent

.play correctHelloAndWorld.go /MAIN/,/MAINEND/

* Making Hello World Concurrent

The `Hello` function uses `3` all the time!

.code correctHelloAndWorld.go /BLOCK/,/BLOCKEND/

This uses `i` at the moment the _func_closure_ executes

Desire to use `i` at the moment _go_ executes

* Making Hello World Concurrent

.play realCorrectHelloAndWorld.go /MAIN/,/MAINEND/

Finally!

* Hello World Synchronizing Goroutines Execution

Note that the goroutines immediately start executing as they are created.

Let's make each goroutine block until the `main` goroutine is done creating all the goroutines.

Modified `World` function:

.code syncStart.go /WORLD/,/WORLDEND/

* Hello World Synchronizing Goroutines Execution

.play syncStart.go /MAIN/,/MAINEND/

* Quick Reflection

So far we have:

- Created multiple goroutines
- Synchronized their execution starting
- Used pre-existing functions to spawn goroutines
- Used anonymous functional closures to spawn goroutines
- Aggregated results from a single channel

But what about multiple channels?

* Hello and World: Multiple Channels

First, let's create multiple channels:

.play helloAndWorldSelect.go /CHAN/,/CHANEND/

* Hello and World: Multiple Channels

The combination of `for` and `select` is very common:

.code helloAndWorldSelect.go /MAIN/,/MAINEND/

Note that `select` and `switch` do _not_ fall-through `case` statements by default.

* More Concurrency Designs

There are a lot of powerful designs that `channels`, `go`, and `for` + `select` can unlock.

For further depth on unlocking the power of concurrency:

- [[https://www.youtube.com/watch?v=f6kdp27TYZs][Go Concurrency Patterns]] by Rob Pike.
- [[https://www.youtube.com/watch?v=QDDwwePbDtw][Advanced Go Concurrency Patterns]] by Sameer Ajmani

* Functional Mastery

With these anonymous functions and closures, being comfortable using functions as a first-class type is important:

- Declaring functions as types
- Functions using functions as arguments
- Functions returning functions

Keeping things readable is why Go starts function definitions with `func`.

* C/C++ vs Go: Functional Programming

In Go, sample function declarations are similar to:

.code funcTypeDecls.txt /GOFUNCGEN/,/GOFUNCGENEND/

Function overloading is not supported for simplified method dispatch.

Therefore, a function type declaration in C++ and GO:

.code funcTypeDecls.txt /CPPFUNC/,/CPPFUNCEND/
.code funcTypeDecls.txt /GOFUNC/,/GOFUNCEND/

* C/C++ vs Go: Functional Programming (cont.)

Function using and returning a function:

.code funcTypeDecls.txt /CPPFUNCFUNC/,/CPPFUNCFUNCEND/
.code funcTypeDecls.txt /GOFUNCFUNC/,/GOFUNCFUNCEND/

* Error Handling

Error is a built in interface in the language:

.code errorDef.go

Any type satisfying all of the function definitions satisfies the interface.

* Creating an error with extra data:

.play metadataError.go /START/,/END/

* Handling the Exceptional without Exceptions

From the `io` package, some lines omitted:

.code ioCopySample.go /STARTIO/,/ENDIO/

* Handling the Exceptional without Exceptions (cont.)

Returning an error as soon as it happens is idiomatic.

.code ioCopySample.go /STARTAPP/,/ENDAPP/

* Handling the Exceptional without Exceptions (cont.)

Handling cleanup would be a problem...

.code ioCopySample.go /STARTAPPCLOSE/,/ENDAPPCLOSE/

* Handling the Exceptional without Exceptions (cont.)

\... but `defer` saves the day.

.code ioCopySample.go /STARTAPPDEFER/,/ENDAPPDEFER/

* Handling the Exceptional without Exceptions (cont.)

Application code winds up having *a*lot* of error checking statements.

Many people find it tedious, but it enables unique error handing for each error that could arise in each step of the process.

.code errAppEx.go
.caption from a [[https://github.com/jvlmdr/lin-go/blob/2237d781ebde411690416d8af6bddd9e88fb8f50/clap/eig.go][vector/math]] library

* Defer any function

.play deferExample.go /MAIN/,/MAINEND/

* Other Defer Uses

[[http://blog.golang.org/defer-panic-and-recover][Panicking and Recovering]] also relies on `defer`.

This allows for behavior similar to exceptions.

Using the `error` idiom is much more common than `panic` and `recover`.

* Recap

- `go` tool helps get, test, benchmark, statically check, and build code easily.
- Community code is readable thanks to `go`fmt`.
- Concurrency is built in, no libraries needed.
- Error handling is highly visible without interrupting flow of control.
- Interfaces can be implemented by types unaware of the interface.

* What to do next

- Take the [[http://tour.golang.org/#1][tour]].
- [[http://play.golang.org/][Play]] with the language and decide whether [[https://golang.org/doc/install][to install it]].
- Follow the [[https://golang.org/doc/code.html][How To Write Go Code]] article to see specific details on setting up your environment.

* Questions?

* References

- [[https://talks.golang.org/2012/splash.article][Go at Google: Language Design in the Service of Software Engineering]] by Rob Pike at SPLASH 2012 in Tucson, Arizona, on October 25, 2012.
- [[http://web.stanford.edu/class/ee380/Abstracts/100428.html][Another Go at Language Design]] by Rob Pike, on April 28, 2010.
- [[https://code.google.com/p/go/source/browse/][Golang Source Code]].
- [[http://norvig.com/design-patterns/][Design Patterns in Dynamic Languages]] by Peter Norvig, on May 5, 1996.
- [[https://golang.org/doc/faq][Golang FAQ]].
- [[https://www.youtube.com/watch?v=sYukPc0y_Ro&m=11&s=10][Go: 'Get s[tuff] done' language]] by Brian Fitzpatrick at dotScale 2013.
- [[https://golang.org/doc/articles/go_command.html][About the go command]].

* References (cont.)

- [[https://tech.dropbox.com/2014/07/open-sourcing-our-go-libraries/][Open Sourcing Our Go Libraries]] by Dropbox.
- [[http://godoc.org/][godoc.org]]
- [[http://blog.golang.org/godoc-documenting-go-code][Documenting Go Code]]
- [[https://godoc.org/github.com/fluhus/godoc-tricks][Godoc Tricks]]
- [[https://blog.golang.org/gccgo-in-gcc-471][gccgo In gcc 4.7.1]]
- [[http://www.techempower.com/benchmarks/#section=data-r9&hw=peak&test=json][Techempower Web Framework Benchmarks]]
- [[http://en.wikipedia.org/wiki/Indent_style][Wikipedia Entry on Indentation Styles]]

* References (cont.)

- [[http://golang.org/src/cmd/gofmt/gofmt.go][gofmt]] source code.
- [[http://blogs.msdn.com/b/oldnewthing/archive/2007/04/06/2036150.aspx][Code is read much more often than it is written, so plan accordingly]] by MSDN in 2007.
- [[https://blog.golang.org/share-memory-by-communicating][Share Memory By Communicating]].
- [[http://blog.golang.org/concurrency-is-not-parallelism][Concurrency Is Not Parallelism]] by Rob Pike on Jan 11, 2012.
- [[https://www.youtube.com/watch?v=f6kdp27TYZs][Go Concurrency Patterns]] by Rob Pike on June 2012. ([[http://talks.golang.org/2012/concurrency.slide#1][slides]])
- [[https://www.youtube.com/watch?v=QDDwwePbDtw][Advanced Go Concurrency Patterns]] by Sameer Ajmani on May 2013. ([[http://talks.golang.org/2013/advconc.slide#1][slides]])
- [[http://blog.golang.org/defer-panic-and-recover][Defer, Panicking and Recovering]]

* References (cont.)

- [[http://www.reneefrench.com][_Gopher_ Images]] by Ren√©e French.
- [[http://research.swtch.com/generic][The Generic Dilemma]] by Russ Cox, December 3, 2009.
- [[https://groups.google.com/d/topic/golang-nuts/o0VTTqC8hOU/discussion][External Linking CLs]] discussion in golang-nuts.
- [[https://groups.google.com/d/topic/golang-dev/Lp59oYc4Ta8/discussion][Go shared libraries]] discussion in golang-dev.